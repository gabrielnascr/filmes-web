/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @next/next/no-typos */
import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/pages/Home.module.scss";

import Header from "../components/Header";
import AddMovieModal from "../components/Modal/AddMovieModal";
import { MovieCard } from "../components/MovieCard";
import UserCard from "../components/UserCard";

import { parseCookies } from "nookies";

import { GetServerSidePropsContext } from "next";
import Button from "../components/Button";

import AuthService from "../services/auth";
import { useModal } from "../context/ModalContex";
import { useMovie } from "../context/MovieContext";
import { useAuth } from "../context/AuthContext";
import AddUserModal from "../components/Modal/AddUserModal";
import { useUsers } from "../context/UsersContext";

interface IMovie {
  id: number;
  title: string;
  ownerName: string;
}

interface User {
  id: number;
  name: string;
  email: string;
}

export default function Home(loggedUser: User) {
  const { handleOpenModal } = useModal();
  const { movies, getAllMovies } = useMovie();
  const { getAllUsers, users } = useUsers();
  const { user, addUser } = useAuth();

  useEffect(() => {
    addUser(loggedUser);
  }, [loggedUser]);

  useEffect(() => {
    getAllUsers();
    getAllMovies(loggedUser.id);
  }, [loggedUser]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Filmes Web</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.content}>
        <Header userName={loggedUser.name} />
        <section className={styles.sectionContainer}>
          <p className={styles.sectionTitle}>
            {movies.length > 0 && "Your movies: "}
          </p>
          {movies.length == 0 ? (
            <p className={styles.noHaveMoviesText}>
              You have not created any movies.
            </p>
          ) : (
            <div className={styles.sectionCardsWrapper}>
              {movies.map((movie) => (
                <MovieCard
                  key={movie.id}
                  id={movie.id}
                  title={movie.title}
                  description={movie.description}
                />
              ))}
            </div>
          )}
          <div className={styles.addMovieButtonContainer}>
            <Button
              onClick={() => {
                handleOpenModal({
                  container: <AddMovieModal />,
                });
              }}
              style={{ backgroundColor: "#2e8b57", marginTop: 60 }}
            >
              Add movie
            </Button>
          </div>
        </section>
        <section className={styles.sectionContainer}>
          <p className={styles.sectionTitle}>All users: </p>
          <div className={styles.sectionCardsWrapper}>
            {users
              ?.sort((_, user) => user.id - loggedUser.id)
              ?.map((user) => (
                <UserCard
                  key={user.id}
                  id={user.id}
                  createdAt={user?.createdAt}
                  lastLoginDate={user.lastLoginDate}
                  name={user.name}
                  email={user.email}
                />
              ))}
          </div>
          <div className={styles.addMovieButtonContainer}>
            <Button
              onClick={() => {
                handleOpenModal({
                  container: <AddUserModal />,
                });
              }}
              style={{ backgroundColor: "#2e8b57", marginTop: 60 }}
            >
              Add user
            </Button>
          </div>
        </section>
      </main>
    </div>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { "@filmesweb.token": token } = parseCookies(context);
  const { "@filmesweb.user": user } = parseCookies(context);

  if (!token || !user) {
    return {
      redirect: {
        destination: "login",
      },
    };
  }

  const loggedUser = await AuthService.getProfile(context);

  if (!loggedUser) {
    return {
      redirect: {
        destination: "login",
      },
    };
  }

  return {
    props: loggedUser,
  };
}
